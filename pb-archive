#!/usr/bin/env python
#
#   Author: Vincent Perricone <vhp@lavabit.com>
#   Date: 02/2012
#   Title: PB-ARCHIVE
#   Description: Archive your pinboard.in bookmarks
#   License: Released under "Simplified BSD License" see LICENSE file
#
import sys
import os
import errno
import datetime
import json
import shlex
import re
from time import sleep
from subprocess import Popen, PIPE

try:
    import argparse
except ImportError:
        print("Python module 'argparse' not found."),
        sys.exit(1)

class Configuration:
    """Class handling state of configuration"""
    def __init__(self, cmd_args):
        """Configuration Constructor: Set stuff up"""
        self.user = ''
        self.token = ''
        self.remote_cacert = 'http://curl.haxx.se/ca/cacert.pem'
        self.pinboard_api = 'http://api.pinboard.in/v1'
        self.dict = vars(self.parse_args(cmd_args))
        self.cacert_exists()

    def parse_args(self, args):
        """Parse command line arguments"""
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', '--verbose', help='Verbose output', action='store_const', const=True, default=False)
        parser.add_argument('-U', '--update', help='Update Current Archive', action='store_const', const=True, default=False)
        parser.add_argument('-u', '--user', help='User name', action='store', required=True, nargs='?', default=self.user)
        parser.add_argument('-t', '--token', help='Token', action='store', required=True, nargs='?', default=self.token)
        parser.add_argument('-c', '--ca-cert', help='CA Certificates', action='store', nargs='?', default='cacert.pem')
        parser.add_argument('-m', '--master', help='Master Mode', action='store_const', const=True, default=False)
        parser.add_argument('-b', '--bookmark-file', help='Bookmark filename', action='store', nargs='?', default='pinboard-bookmarks.json')
        parser.add_argument('-s', '--strict', help='Strict Mode', action='store_const', const=True, default=False)
        return parser.parse_args(args)

    def update_cacert(self):
        """Fetch Updated Certificate Authority"""
        if wget(self.dict['ca_cert'], self.remote_cacert):
            print('Certificate Authority file updated')
            return True
        else:
            return False

    def cacert_exists(self):
        """Check if the CA Certificate Exists. If not initiate download"""
        try:
            with open(self.dict['ca_cert']): pass
        except IOError:
            print('Updating {0}').format(self.dict['ca_cert'])
            if not self.update_cacert():
                print('Exiting: Certificate Authority file not retrieved.')
                sys.exit(3)

class Pinboard:
    """Pinboard Methods"""
    def __init__(self, settings, api):
        self.settings = settings
        self.api = api
        self.get_all_bookmarks()

    def get_all_bookmarks(self, method='posts/all'):
        """Fetch Json formatted backup file representing all bookmarks"""
        url = ('{0}/{1}?format=json&auth_token={2}:{3}'.format(self.api,
                method, self.settings['user'], self.settings['token']))
        print('Sleeping for 30 seconds')
        sleep(30)
        wget_ca = '--ca-certificate={0}'.format(self.settings['ca_cert'])
        wget_out = '-O{0}'.format(self.settings['bookmark_file'])
        wget_proc = (Popen(['wget', '-qN', wget_ca, wget_out, url],
                           stdout=PIPE, stderr=PIPE))
        stdoutdata = wget_proc.communicate()[0]
        if wget_proc.returncode == 0:
            return True
        else:
            return False

def get_local(first_line, url):
    """Ensure wget(1) output and return local path of archive if it exists"""
    pattern = r'^\d{4}-\d{2}-\d{2}\ \d{2}:\d{2}:\d{2}\ URL:\S+\ \[\S+\]\ ->\ \S+\ \[1\]$'
    if re.match(pattern, first_line):
        base =  re.sub('^URL:', '', shlex.split(first_line)[2])
        local_file = shlex.split(first_line)[5]
        if base in url:
            return local_file
        else:
            return None
    else:
        return None

def wget_archive(ca_cert, mode_strict, url):
    """Archival wget(1), used for bookmark archiving"""
    wget_ca = '--ca-certificate={0}'.format(ca_cert)
    wget_proc = (Popen(['wget', wget_ca, '--page-requisites', '--no-verbose',
                        '--convert-links', '--adjust-extension',
                        '--backup-converted',  url], stdout=PIPE, stderr=PIPE))
    (stdout, stderr) = wget_proc.communicate()
    if wget_proc.returncode == 0 or not mode_strict:
        # Success or user accepts best effort
        return get_local(stderr.splitlines()[0], url)
    else:
        # Failure with Strict mode ON.
        return None

def wget(cacert_file, url):
    """Non archival wget(1)"""
    wget_args = '--ca-certificate={0}'.format(cacert_file)
    wget_proc = Popen(['wget', '-qN', wget_args, url], stdout=PIPE, stderr=PIPE)
    stdoutdata = wget_proc.communicate()[0]
    if wget_proc.returncode == 0:
        return True
    else:
        return False

def get_bookmark(bookmark_file):
    """Extract Description, URL and Tags and yield tuple"""
    with open(bookmark_file, 'r') as bookmarks_obj:
        bookmarks = json.load(bookmarks_obj)
        for bookmark in bookmarks:
            yield (bookmark['description'], bookmark['href'], bookmark['tags'])

def archive(bookmark_file, mode_strict, ca_cert):
    """Process of archiving the data"""
    print('Archiving. This may take a long time.')
    with open('report', 'w+') as report:
        for description, url, tags in get_bookmark(bookmark_file):
            local_file = wget_archive(ca_cert, mode_strict, url)
            if local_file:
                report.write('{0}\n'.format(description.encode('utf8', 'replace')))
                report.write('\t-URL:{0}\n'.format(url.encode('utf8', 'replace')))
                report.write('\t-Local:./{0}\n'.format(local_file.encode('utf8', 'replace')))
                report.write('\t-Tags:{0}\n\n'.format(tags.encode('utf8', 'replace')))
            else:
                print('Failed to Archive: {0}'.format(url))

def setup_environment(mode_master, mode_update):
    """Setup the Environment"""
    if mode_master:
        archive = 'archive-master'
    else:
        archive = 'archive-{0}'.format(datetime.date.today())
    try:
        os.mkdir(archive)
    except OSError as error:
        if error.errno == errno.EEXIST:
            if mode_update:
                os.chdir(archive)
            else:
                print("Archive Directory {0} already exists".format(archive))
                print('Use -U flag for updating or move {0}'.format(archive))
                sys.exit(4)
        elif error.errno == errno.EACCES:
            print("Permission Denied: {0} could not be created".format(archive))
            sys.exit(5)
        else:
            print('Error: {0}'.format(error.errno))
            sys.exit(2)
    else:
        os.chdir(archive)

def main(args):
    settings = Configuration(args)
    setup_environment(settings.dict['master'], settings.dict['update'])
    Pinboard(settings.dict, settings.pinboard_api)
    archive(settings.dict['bookmark_file'], settings.dict['strict'], settings.dict['ca_cert'])

if __name__ == '__main__':
    main(sys.argv[1:])
